/*
–ó–∞ —Ä–∞–∑–ª–∏—á–Ω–∏ –≥—Ä–∞–¥–æ–≤–∏ –¥–∞–¥–µ–Ω–∏ —Å–µ –º–µ—Ä–µ—ö–∞—Ç–∞ –Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞—Ç–∞ (—Å—Ç–µ–ø–µ–Ω–∏ –¶–µ–ª–∑–∏—É—Å–æ–≤–∏) –≤–æ –æ–¥—Ä–µ–¥–µ–Ω–∏ –≤—Ä–µ–º–µ–Ω—Å–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∏. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –µ –∑–∞ –¥–∞–¥–µ–Ω –≥—Ä–∞–¥ –¥–∞ —Å–µ –Ω–∞j–¥–µ –Ω–∞j—Ç–æ–ø–ª–∏–æ—Ç –ø–µ—Ä–∏–æ–¥ –æ–¥ –¥–µ–Ω–æ—Ç.
–í–ª–µ–∑: –í–æ –ø—Ä–≤–∏–æ—Ç —Ä–µ–¥ –æ–¥ –≤–ª–µ–∑–æ—Ç –µ –¥–∞–¥–µ–Ω –±—Ä–æj–æ—Ç –Ω–∞ –º–µ—Ä–µ—ö–∞ ùëÅ (ùëÅ<= 10000), –∞ –≤–æ —Å–µ–∫–æj –Ω–∞—Ä–µ–¥–µ–Ω —Ä–µ–¥ –µ –¥–∞–¥–µ–Ω –ø—Ä–≤–æ –≥—Ä–∞–¥–æ—Ç, 
–ø–æ—Ç–æ–∞ –ø–æ—á–µ—Ç–æ–∫ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª, –∫—Ä–∞j –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞—Ç–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏ —Å–æ –ø—Ä–∞–∑–Ω–æ –º–µ—Å—Ç–æ. 
–í–æ –ø–æ—Å–ª–µ–¥–Ω–∏–æ—Ç —Ä–µ–¥ –µ –¥–∞–¥–µ–Ω –≥—Ä–∞–¥–æ—Ç –∑–∞ –∫–æj —Ç—Ä–µ–±–∞ –¥–∞ –Ω–∞j–¥–µ—Ç–µ –Ω–∞j—Ç–æ–ø–æ–ª –ø–µ—Ä–∏–æ–¥ –æ–¥ –¥–µ–Ω–æ—Ç –∏ –∏—Å—Ç–∏–æ—Ç –ø–µ—Ä–∏–æ–¥ –¥–∞ —Å–µ –∏—Å–ø–µ—á–∞—Ç–∏. –°–ª–æ–∂–µ–Ω–æ—Å—Ç–∞ –Ω–∞ –æ–≤–∞–∞ –æ–ø–µ—Ä–∞—Ü–∏j–∞ —Ç—Ä–µ–±–∞ –¥–∞ –±–∏–¥–µ O(1). 
–ò–∑–ª–µ–∑: –ù–∞j—Ç–æ–ø–ª–∏–æ—Ç –ø–µ—Ä–∏–æ–¥ –æ–¥ –¥–µ–Ω–æ—Ç –∑–∞ –¥–∞–¥–µ–Ω –≥—Ä–∞–¥. 
–î–∞ —Å–µ –∏—Å–ø–µ—á–∞—Ç–∏ –≤–æ —Å–ª–µ–¥–Ω–∏–æ–≤ —Ñ–æ—Ä–º–∞—Ç: G: HH:MM ‚Äì XX:YY Z, –∫–∞–¥–µ —à—Ç–æ G –µ –≥—Ä–∞–¥–æ—Ç, HH:MM e –ø–æ—á–µ—Ç–æ–∫–æ—Ç –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ—Ç, XX:YY –µ –∫—Ä–∞j–æ—Ç –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ—Ç, –∞ Z e —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞—Ç–∞ –≤–æ —Å—Ç–µ–ø–µ–Ω–∏ –¶–µ–ª–∑–∏—É—Å–æ–≤–∏. 

–ü—Ä–∏–º–µ—Ä
–í–ª–µ–∑:
4
Ohrid,Macedonia 10:00 12:00 23.1 
Skopje,Macedonia 09:00 10:30 24 
Ohrid,Macedonia 12:00 13:00 25 
Skopje,Macedonia 10:00 11:00 26.2
Ohrid,Macedonia

–ò–∑–ª–µ–∑:
Ohrid,Macedonia: 12:00 - 13:00 25.0
*/

import java.util.*;

class MapEntry<K extends Comparable<K>, E> {
    // Each MapEntry object is a pair consisting of a key (a Comparable object)
    // and a value (an arbitrary object).
    K key;
    E value;

    public MapEntry(K key, E val) {
        this.key = key;
        this.value = val;
    }

    public String toString() {
        return "<" + key + "," + value + ">";
    }
}

class SLLNode<E> {
    protected E element;
    protected SLLNode<E> succ;

    public SLLNode(E elem, SLLNode<E> succ) {
        this.element = elem;
        this.succ = succ;
    }

    @Override
    public String toString() {
        return element.toString();
    }
}


class CBHT<K extends Comparable<K>, E> {

    // An object of class CBHT is a closed-bucket hash table, containing
    // entries of class MapEntry.
    private SLLNode<MapEntry<K, E>>[] buckets;

    @SuppressWarnings("unchecked")
    public CBHT(int m) {
        // Construct an empty CBHT with m buckets.
        buckets = (SLLNode<MapEntry<K, E>>[]) new SLLNode[m];
    }

    private int hash(K key) {
        // Translate key to an index of the array buckets.
        return Math.abs(key.hashCode()) % buckets.length;
    }

    public SLLNode<MapEntry<K, E>> search(K targetKey) {
        // Find which if any node of this CBHT contains an entry whose key is equal to targetKey.
        // Return a link to that node (or null if there is none).
        int b = hash(targetKey);
        SLLNode<MapEntry<K, E>> currNode = buckets[b];
        while (currNode != null) {
            MapEntry<K, E> currEntry = currNode.element;
            if (currEntry.key.equals(targetKey)) return currNode;
            else currNode = currNode.succ;
        }
        return null;
    }

    public void insert(K key, E val) {
        // Insert the entry <key, val> into this CBHT.
        // If entry with same key exists, overwrite it.
        MapEntry<K, E> newEntry = new MapEntry<>(key, val);
        int b = hash(key);
        SLLNode<MapEntry<K, E>> currNode = buckets[b];
        while (currNode != null) {
            MapEntry<K, E> currEntry = currNode.element;
            if (currEntry.key.equals(key)) {
                // Make newEntry replace the existing entry ...
                currNode.element = newEntry;
                return;
            } else currNode = currNode.succ;
        }
        // Insert newEntry at the front of the SLL in bucket b ...
        buckets[b] = new SLLNode<>(newEntry, buckets[b]);
    }

    public void delete(K key) {
        // Delete the entry (if any) whose key is equal to key from this CBHT.
        int b = hash(key);
        SLLNode<MapEntry<K, E>> predNode = null, currNode = buckets[b];
        while (currNode != null) {
            MapEntry<K, E> currEntry = currNode.element;
            if (currEntry.key.equals(key)) {
                if (predNode == null) buckets[b] = currNode.succ;
                else predNode.succ = currNode.succ;
                return;
            } else {
                predNode = currNode;
                currNode = currNode.succ;
            }
        }
    }

    public String toString() {
        String temp = "";
        for (int i = 0; i < buckets.length; i++) {
            temp += i + ":";
            SLLNode<MapEntry<K, E>> curr = buckets[i];
            while (curr != null) {
                temp += curr.element.toString() + " ";
                curr = curr.succ;
            }
            temp += "\n";
        }
        return temp;
    }
}

class Merenje{
    String city;
    String time_from;
    String time_to;
    float temperature;

    public Merenje(String city, String time_from, String time_to, float temperature) {
        this.city = city;
        this.time_from = time_from;
        this.time_to = time_to;
        this.temperature = temperature;
    }

    @Override
    public String toString() {
        return city + ": " + time_from + " - " + time_to + " " + String.format("%.1f", temperature);
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        sc.nextLine();

        CBHT<String, Merenje> table = new CBHT<String, Merenje>(2*n-1);
        for (int i = 0; i < n; i++) {
            String city = sc.next();
            String time_from = sc.next();
            String time_to = sc.next();
            float temperature = sc.nextFloat();

            Merenje merenje = new Merenje(city, time_from, time_to, temperature);
            SLLNode<MapEntry<String, Merenje>> curr = table.search(city);

            if (curr == null) {
                table.insert(city, merenje);
            }
            else {
                float prev_temp = curr.element.value.temperature;
                Merenje prev_merenje = curr.element.value;

                if (prev_temp >= temperature){
                    table.insert(city, prev_merenje);
                }
                else{
                    table.insert(city, merenje);
                }
            }
        }

        String city = sc.next();
        SLLNode<MapEntry<String, Merenje>> curr = table.search(city);
        if (curr == null) {
            System.out.println("Empty");
        }
        else{
            System.out.println(curr.element.value);
        }
    }
}

